"use strict";
// Convenience classes to allow users to strictly specify the number type they want
Object.defineProperty(exports, "__esModule", { value: true });
exports.Float64 = exports.Uint = exports.Int = void 0;
const constants_1 = require("./constants");
class Int {
    constructor(value) {
        if (!(Number.isInteger(value) &&
            value <= Number.MAX_SAFE_INTEGER &&
            value >= Number.MIN_SAFE_INTEGER)) {
            throw new RangeError(`Value ${value} cannot be a uint`);
        }
        this.value = value;
        Reflect.defineProperty(this, constants_1.INT, { value: true });
        Object.freeze(this);
    }
}
exports.Int = Int;
class Uint {
    constructor(value) {
        if (!(Number.isInteger(value) &&
            value <= Number.MAX_SAFE_INTEGER &&
            value >= 0)) {
            throw new RangeError(`Value ${value} cannot be a uint`);
        }
        this.value = value;
        Reflect.defineProperty(this, constants_1.UINT, { value: true });
        Object.freeze(this);
    }
}
exports.Uint = Uint;
class Float64 {
    constructor(value) {
        if (typeof value !== "number") {
            throw new RangeError(`Value ${value} cannot be a float64`);
        }
        this.value = value || 0.0;
        Reflect.defineProperty(this, constants_1.F64, { value: true });
        Object.freeze(this);
    }
}
exports.Float64 = Float64;
